(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :as r]
   [hoplon.reveal :refer [slideshow chapter slide notes highlight quicklist bullet]]))

(defelem mono [_ xs] (span :style "font-family: monospace;" xs))
(when (-> js/window .-location .-hostname (= "localhost")) (r/reload-all))

(slideshow :theme "simple"

  (chapter :title [(h1 "Hoplon")
                   (hr)
                   (h4 "Web Application Programming with Undead Technology")]

    (slide :title "Why raise the dead?"
      (quicklist "Platforms ever more complicated, diverse"
                 "We're bad at estimating"
                 "We can't reliably repeat successes"
                 (em "We're losing even the easiest battles"))))

  (chapter :title "Spreadsheets" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (slide
      (img :src "img/Visicalc.png")
      (p (em "VisiCalc (1979)")))

    (slide
      (img :src "img/Excel1.png")
      (p (em "Excel (2014)")))

    (slide
      (p (img :src "img/stewart.jpg"))
      (p (em "Like Patrick Stewart, spreadsheets are undead.")))

    (slide :title "Spreadsheets are Amazing"
      (quicklist
       "Disparaged by many progammers"
       "Seen as an open problem instead of solution to learn from"
       "Not computer-sciency enough"
       "What people use when we fail them"))

    (slide :title "Staying Power"
      (quicklist
       "Reactive"
       "Transparent"
       "Layered"))

    (slide
      (p (img :src "img/rich_hickey.png"))
      (p (em "\"You can have a variety of semantics for managing time... 
              for managing the succession of values [represented by an identity]\""))
      (p "Rich Hickey"))

    (slide :title "Reactive"
      (quicklist
       (span (code "cell") " - another \"unit of time management\"")
       (span "Similar to " (code "atom") ", " (code "ref") ", " (code "var") ", " (code "agent")))
      (hr)
      (em "Time doesn't exist in spreadsheets."))

    (slide :title "Transparent"
      (img :src "img/Spreadsheet_animation.gif")
      (hr)
      (quicklist
       "Data, formulas, and their relationships are highly accessible."
       "The entire interface is a giant debugger."))

    (slide :title "Layered"
      (img :src "img/Excel2.gif")
      (hr)
      (p "Data, formula, and chart are separate layers"))

    (slide
      (img :src "img/excel_wizard_one.gif")
      (hr)
      (p "Charts and forms can be added and customized without modifying the 
          underlying data or formulas."))

    (slide :title "Spreadsheets Divide Labor"
      (quicklist
       "Clerks enter data"
       "Domain experts write formulas"
       "Others make visualizations, reports, applications")))

  (chapter :title "Javelin" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (slide :title "Javelin"
      (p (img :src "img/javelin.png"))
      (p "Spreadsheet-like dataflow programming in ClojureScript."))

    (slide :title "Input Cells")

    (slide :title (code "cell")
      (highlight
       ;;{{
       (def n (cell 0))
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title (code "defc")
      (highlight
       ;;{{
       (defc n 0)
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title "Formula Cells")

    (slide :title (code "cell=")
      (highlight
       ;;{{
       (defc n 0)
       (def  n*5 (cell= (* n 5)))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title (code "defc=")
      (highlight
       ;;{{
       (defc  n 0)
       (defc= n*5 (* n 5))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title "Javelin's Twists"
      (quicklist
       (span "Cells can contain"
         (quicklist "Collections"
                    "Functions"
                    "Cells"))
       (span "Naming/scopes follow ClojureScript"
         (quicklist
          (code "def")
          (code "let"))))))

  (chapter :title "HLisp" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (slide :title "HTML is Already a Program"
      (quicklist
        "Browser parses HTML markup"
        "Builds tree"
        "Creates DOM elements"))
    
    (slide :title "However..."
      (quicklist
        "No means of abstraction"
        "No access to JavaScript environment"
        "No scopes"))
    
    (slide :title "But, HTML is Lispy"
      (highlight
          ;;{{
          <div>
            <h1>Hello World</h1>
            <p>Lisp rules!</p>
          </div>
          ;;}}
          )
      (highlight :class "language-clojure"
        ;;{{
        (div
          (h1 "Hello World")
          (p "Lisp rules!"))
        ;;}}
        ))
    
    (slide :title "The Hoplon Compiler"
      (quicklist
        (span "Hoplon compiles " (code "*.hl") " source files")
        (span "Emits HTML files and " (code "main.js"))
        "ClojureScript builds DOM at runtime"
        "Frontend completely static HTML and JS"))
    
    (slide :title "Example Page"
      (highlight :class "language-clojure"
        ;;{{
        (page "index.html")
        
        (html
          (head
            (title "hello | home"))
          (body
            (h1 "Hello, world!")))
        ;;}}
        ))
    
    (slide :title "Attributes"
      (highlight :class "language-clojure"
        ;;{{
        (div :id "main" :class "fancy"
          (h1 "Hello World"))
        
        (div {:id "main" :class "fancy"}
          (h1 "Hello World"))
         ;;}}
         )
      (hr)
      (em "Attribute values don't have to be strings."))
    
    (slide :title "No Boxing or Indirection"
      (highlight :class "language-clojure"
        ;;{{
        (type (div))
        ;=> function HTMLDivElement() { [native code] }
        ;;}}
        )
      (hr)
      (em "Manipulate DOM elements directly."))
    
    (slide :title (h3 "Elements Implement " (code "IFn"))
      (highlight :class "language-clojure"
        ;;{{
        (def elem (div :id "div1"))
        
        (elem :class "fancy"
          (p "I'm in a paragraph!"))
        
        ; <div id="div1" class="fancy">
        ;   <p>I'm in a paragraph!</p>
        ; </div>
        ;;}}
        )
      )

    (slide :title "Functions, not Templates"
      (highlight :class "language-clojure"
        ;;{{
        (defn foo [& children]
          (div
            (h1 "Hello World")
            children))
        
        ...
        
        (div
          (foo
            (p "Clojure is fun!")))
        ;;}}
        )
      (hr)
      (em "Take advantage of the affordances of Lisp in a unified environment."))

    (slide :title (code "defelem")
      (highlight :class "language-clojure"
        ;;{{
        (defelem quicklist [attr-map items]
          (ul attr-map
            (map li items)))
        
        ...
        
        (div
          (quicklist :class "fancy"
            (span "item 1")
            (span "item 2")))
        ;;}}
        )
      (hr)
      (em "Collects attributes and children, implements HTML semantic."))
    
    (slide :title "Page Declaration"
      (quicklist
        "Similar to CLJS namespace declaration"
        "Location of emitted HTML file relative to docroot"
        "HLisp elements etc. referred into namespace"))
    
    (slide
      (highlight :class "language-clojure"
        ;;{{
        (page "products/catalog.html"
          (:refer-hoplon :exclude [div span])
          (:require [megacorp.components :refer [div span]]))
        
        ...
        ;;}}
        ))

    (slide :title "DOM = I/O"
      (quicklist
        "Events are input"
        "Elements and their properties provide output"
        "One-way dataflow: input and output never mix"))
    
    (slide
      (quicklist
        "Callbacks trigger updates to input cells"
        "Cells trigger updates to DOM element properties"))

    (slide
      (highlight :class "language-clojure"
        ;;{{
        (defc clicks 0)

        (button
          :style (cell= (str "color:" (if (even? clicks) "red" "blue")))
          :click #(swap! clicks inc)
          :text (cell= (str "I've been clicked " clicks " times!")))
        ;;}}
        )
      (p (br))
      (let [clicks (cell 0)]
        (button
          :style (cell= (str "font-size:larger;color:" (if (even? clicks) "red" "blue")))
          :click #(swap! clicks inc)
          :text (cell= (str "I've been clicked " clicks " times!"))))
      (p (br))
      (hr)
      (em "Attributes dispatch on type of value."))
    
    (slide
      (highlight :class "language-clojure"
        ;;{{
        (defmethod do! :slide
          [element _ value]
          (case value
            :up (.slideUp (js/jQuery element))
            :down (.slideDown (js/jQuery element))))
        
        (defmethod on! :swipe-left
          [element _ callback]
          (.on (js/jQuery element) "swipeleft" callback))
        
        (defc swipes 0)

        (div :swipe-left #(swap! swipes inc)
          (p :slide (cell= (if (even? swipes) :down :up)))
          (p "Swipe here!"))
        ;;}}
        )
      (hr)
      (em "Attributes can be extended."))
    
    (slide :title "When HTML is a Program..."
      (highlight :class "language-clojure"
        ;;{{
        (def-values
          [trigger1 content1 trigger2 content2]
          (tabify a div a div))
        
        (div :class "tabs"

          (ul :class "tab-triggers"
            (li (trigger1 "tab 1"))
            (li (trigger2 "tab 2")))

          (div :class "tab-content"
            (content1
              (p "Content for tab 1."))
            (content2
              (p "Content for tab 2."))))
        ;;}}
        ))
    
    (slide :title "When HTML is a Program..."
      (highlight :class "language-clojure"
        ;;{{
        (def red-div
          (div :css {:background-color "red"}))
        
        (red-div
          (p "My background is red!"))
        ;;}}
        ))
    )
  
  (chapter :title "Castra" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (slide
      (quicklist
        "Ring RPC middleware + CLJS client library"
        "Performant EDN transport over HTTP"
        "Affordances for CQRS state machine pattern"
        "A great match with Datomic"))
    
    (slide
      (img :src "img/castra-cqrs.png"))
    
    (slide :title "API Endpoints"
      (quicklist
        "regular functions with annotations"
        "similar to Clojure pre and postconditions"
        "pre and post only applied at RPC endpoint"
        "facilitates composition without mocking state"
        "exceptions can be caught in the client"))

    (slide :title "Pre and Postconditions"
      (highlight
        ;;{{
        (castra/defn buy-item! [id sku qty]
          {:rpc/pre [(rules/logged-in-as? id)]
           :rpc/query [(next-state nil)]}
          ...)
        ;;}}
        ))

    (slide
      (highlight
        ;;{{
        (ns my-application.api
          (:require
           [tailrecursion.castra      :as castra]
           [my-application.http-rules :as rules]
           [my-application.core       :as core]))
        
        (castra/defn query [id]
          {:rpc/pre [(or (nil? id) (rules/self? id))]}
          (when-let [id (or id (rules/get-self))]
            {:user-id     id
             :cc-on-file? (core/cc-on-file? id)
             :cart        (core/get-cart id)}))
        
        (castra/defn login! [email password]
          {:rpc/pre [(rules/allow)]
           :rpc/query [(query nil)]}
          (if-let [self (core/get-login email password)]
            (rules/set-self! (:id self))
            (throw (Exception. "Username or password incorrect."))))
        ;;}}
        )))
  
  (chapter :title "Architecture" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    )
  )
