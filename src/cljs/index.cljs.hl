(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :as r]
   [hoplon.reveal :refer [slideshow chapter slide notes highlight quicklist bullet]]))

(defelem mono [_ xs] (span :style "font-family: monospace;" xs))
(when (-> js/window .-location .-hostname (= "localhost")) (r/reload-all))

(slideshow :theme "simple"

  (slide :title "Hoplon"
    (hr)
    (h4 "Application Programming with Undead Technology"))

  (chapter :title "Spreadsheets" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (slide
      (p "Spreadsheets are amazing."))

    (slide
      (img :src "img/Visicalc.png")
      (p (em "VisiCalc (1979)")))

    (slide
      (img :src "img/Excel1.png")
      (p (em "Excel (2014)")))

    (slide
      (p (img :src "img/stewart.jpg"))
      (p (em "Like Patrick Stewart, spreadsheets are undead.")))

    (slide :title "Staying Power"
      (quicklist
       "Reactive"
       "Transparent"
       "Layered"))

    (slide
      (p (img :src "img/rich_hickey.png"))
      (p (em "\"You can have a variety of semantics for managing time... 
              for managing the succession of values [represented by an identity]\""))
      (p "Rich Hickey"))

    (slide :title "Reactive"
      (quicklist
       (span (code "cell") " - another \"unit of time management\"")
       (span "Similar to " (code "atom") ", " (code "ref") ", " (code "var") ", " (code "agent")))
      (hr)
      (em "Time doesn't exist in spreadsheets."))

    (slide :title "Transparent"
      (img :src "img/Spreadsheet_animation.gif")
      (hr)
      (quicklist
       "Data, formulas, and their relationships are highly accessible."
       "The entire interface is a giant debugger."))

    (slide :title "Layered"
      (img :src "img/Excel2.gif")
      (hr)
      (p "Data, formula, and chart are separate layers"))

    (slide
      (img :src "img/excel_wizard_one.gif")
      (hr)
      (p "Charts can be added and customized without modifying the underlying data or formulas."))

    (slide :title "Spreadsheets Divide Labor"
      (quicklist
       "Clerks enter data"
       "Domain experts write formulas"
       "Others make visualizations, reports, applications")))

  (chapter :title "Javelin"

    (slide :title "Javelin"
      (p (img :src "img/javelin.png"))
      (p "Spreadsheet-like dataflow programming in ClojureScript."))

    (slide :title "Input Cells")

    (slide :title (code "cell")
      (highlight
       ;;{{
       (def n (cell 0))
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title (code "defc")
      (highlight
       ;;{{
       (defc n 0)
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title "Input Cell in Action"
      (highlight
       ;;{{
       (let [cnt (cell 0)]
         (div
           (p (text "cnt = ~{cnt}"))
           (button :on-click #(swap! cnt inc) "Increment!")))
       ;;}}
       )
      (let [cnt (cell 0)]
        (div
          (p (text "cnt = ~{cnt}"))
          (button :on-click #(swap! cnt inc) "Increment!"))))

    (slide :title "Formula Cells")

    (slide :title (code "cell=")
      (highlight
       ;;{{
       (defc n 0)
       (def  n*5 (cell= (* n 5)))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title (code "defc=")
      (highlight
       ;;{{
       (defc  n 0)
       (defc= n*5 (* n 5))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title "Formula Cell in Action"
      (highlight
       ;;{{
       (let [cnt   (cell 0)
             cnt*5 (cell= (* cnt 5))]
         (div
           (p (text "cnt = ~{cnt}, cnt*5 = ~{cnt*5}"))
           (button :class :on-click #(swap! cnt inc) "Increment!")
           (button :on-click #(swap! cnt dec) "Decrement!")))
       ;;}}
       )
      (let [cnt   (cell 0)
            cnt*5 (cell= (* cnt 5))]
        (div
          (p (text "cnt = ~{cnt}, cnt*5 = ~{cnt*5}"))
          (button :on-click #(swap! cnt inc) "Increment!")
          (button :on-click #(swap! cnt dec) "Decrement!"))))))
