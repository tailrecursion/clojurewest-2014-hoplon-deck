(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :as r]
   [hoplon.reveal :refer [slideshow chapter slide notes highlight quicklist bullet]]))

(defelem mono [_ xs] (span :style "font-family: monospace;" xs))
(when (-> js/window .-location .-hostname (= "localhost")) (r/reload-all))

(slideshow :theme "simple"

  (chapter
    (slide :title "Hoplon"
      (hr)
      (h4 "Application Programming with Undead Technology"))

    (slide :title "Why raise the dead?"
      (quicklist "Platforms ever more complicated, diverse"
                 "We're bad at estimating"
                 "We can't reliably repeat successes"
                 (em "We're losing even the easiest battles"))))

  (chapter :title "Spreadsheets" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (slide
      (p "Spreadsheets are amazing."))

    (slide
      (img :src "img/Visicalc.png")
      (p (em "VisiCalc (1979)")))

    (slide
      (img :src "img/Excel1.png")
      (p (em "Excel (2014)")))

    (slide
      (p (img :src "img/stewart.jpg"))
      (p (em "Like Patrick Stewart, spreadsheets are undead.")))

    (slide :title "Staying Power"
      (quicklist
       "Reactive"
       "Transparent"
       "Layered"))

    (slide
      (p (img :src "img/rich_hickey.png"))
      (p (em "\"You can have a variety of semantics for managing time... 
              for managing the succession of values [represented by an identity]\""))
      (p "Rich Hickey"))

    (slide :title "Reactive"
      (quicklist
       (span (code "cell") " - another \"unit of time management\"")
       (span "Similar to " (code "atom") ", " (code "ref") ", " (code "var") ", " (code "agent")))
      (hr)
      (em "Time doesn't exist in spreadsheets."))

    (slide :title "Transparent"
      (img :src "img/Spreadsheet_animation.gif")
      (hr)
      (quicklist
       "Data, formulas, and their relationships are highly accessible."
       "The entire interface is a giant debugger."))

    (slide :title "Layered"
      (img :src "img/Excel2.gif")
      (hr)
      (p "Data, formula, and chart are separate layers"))

    (slide
      (img :src "img/excel_wizard_one.gif")
      (hr)
      (p "Charts and forms can be added and customized without modifying the 
          underlying data or formulas."))

    (slide :title "Spreadsheets Divide Labor"
      (quicklist
       "Clerks enter data"
       "Domain experts write formulas"
       "Others make visualizations, reports, applications")))

  (chapter :title "Javelin" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (slide :title "Javelin"
      (p (img :src "img/javelin.png"))
      (p "Spreadsheet-like dataflow programming in ClojureScript."))

    (slide :title "Input Cells")

    (slide :title (code "cell")
      (highlight
       ;;{{
       (def n (cell 0))
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title (code "defc")
      (highlight
       ;;{{
       (defc n 0)
       @n ;=> 0

       (swap! n inc)
       @n ;=> 1
       ;;}}
       ))

    (slide :title "Formula Cells")

    (slide :title (code "cell=")
      (highlight
       ;;{{
       (defc n 0)
       (def  n*5 (cell= (* n 5)))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title (code "defc=")
      (highlight
       ;;{{
       (defc  n 0)
       (defc= n*5 (* n 5))
       @n   ;=> 0
       @n*5 ;=> 0

       (swap! n inc)
       @n   ;=> 1
       @n*5 ;=> 5
       ;;}}
       ))

    (slide :title "Javelin's Twists"
      (quicklist
       (span "Cells can contain"
         (quicklist "Collections"
                    "Functions"
                    "Cells"))
       (span "Naming/scopes follow ClojureScript"
         (quicklist
          (code "def")
          (code "let"))))))

  (chapter :title "HLisp" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (slide :title "HTML is Already a Program"
      (quicklist
        "Browser parses HTML, builds tree, creates DOM"
        "No means of abstraction"
        "No access to JavaScript environment"))
    
    (slide :title "But, HTML is Lispy"
      (highlight
          ;;{{
          <div>
            <h1>Hello World</h1>
            <p>Lisp rules!</p>
          </div>
          ;;}}
          )
      (highlight
        ;;{{
        (div
          (h1 "Hello World")
          (p "Lisp rules!"))
        ;;}}
        )
      (hr)
      (em "You can still use HTML syntax, no problem."))
    
    (slide :title "Attributes"
      (highlight
        ;;{{
        (div :id "main" :class "fancy"
          (h1 "Hello World"))
        
        (div {:id "main" :class "fancy"}
          (h1 "Hello World"))
         ;;}}
         )
      (hr)
      (em "Attribute values don't have to be strings."))
    
    (slide :title "No Boxing or Indirection"
      (highlight :class "language-clojure"
        ;;{{
        (type (div))
        ;=> function HTMLDivElement() { [native code] }
        ;;}}
        )
      (hr)
      (em "Manipulate DOM elements directly."))

    (slide :title "Functions, not Templates"
      (highlight
        ;;{{
        (defn foo []
          (div
            (h1 "Hello World")))
        
        ...
        
        (html
          (head)
          (body
            (foo)))
        ;;}}
        )
      (hr)
      (em "Take advantage of the affordances of Lisp in a unified environment."))

    (slide :title (code "defelem")
      (highlight
        ;;{{
        (defelem quicklist [attr-map items]
          (ul attr-map
            (map li items)))
        
        ...
        
        (html
          (head)
          (body
            (quicklist :class "fancy"
              "item 1"
              "item 2")))
        ;;}}
        )
      (hr)
      (em "Collects attribute and child arguments, implementing the HTML semantic."))
    
    (slide :title "DOM = I/O"
      (quicklist
        "Events are input"
        "Elements and their properties provide output"
        "One-way dataflow: input and output are completely orthogonal"))
    
    (slide
      (quicklist
        "Callbacks trigger updates to input cells"
        "Cells trigger updates to DOM element properties"))

    (slide
      (highlight
        ;;{{
        (defc clicks 0)

        (button
          :style (cell= (str "color:" (if (even? clicks) "red" "blue")))
          :click #(swap! clicks inc)
          :text (cell= (str "I've been clicked " clicks " times!")))
        ;;}}
        )
      (p (br))
      (let [clicks (cell 0)]
        (button
          :style (cell= (str "font-size:larger;color:" (if (even? clicks) "red" "blue")))
          :click #(swap! clicks inc)
          :text (cell= (str "I've been clicked " clicks " times!"))))
      (p (br))
      (hr)
      (em "Attributes dispatch on type of value."))
    
    (slide
      (highlight
        ;;{{
        (defmethod do! :slide
          [element _ value]
          (case value
            :up (.slideUp (js/jQuery element))
            :down (.slideDown (js/jQuery element))))
        
        (defmethod on! :swipe-left
          [element _ callback]
          (.on (js/jQuery element) "swipeleft" callback))
        
        (defc swipes 0)

        (div :swipe-left #(swap! swipes inc)
          (p :slide (cell= (if (even? swipes) :down :up)))
          (p "Swipe here!"))
        ;;}}
        )
      (hr)
      (em "Attributes can be extended.")))
  
  (chapter :title "Castra" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (slide
      (quicklist
        "Ring RPC middleware + CLJS client library"
        "Performant EDN transport over HTTP"
        "A great match with CQRS and Datomic"))
    
    )
  )
